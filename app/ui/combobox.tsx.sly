import { useState } from "react"
import { Icon } from "./icon"
import { Button } from "./button"
import {
  Command,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "./command"
import { Popover, PopoverContent, PopoverTrigger } from "./popover"
import { ScrollArea } from "./scroll-area"
import { cn } from "#app/utils/misc"

export type ComboboxOptions = {
  value: string
  label: string
}

export function Combobox({
  id,
  name,
  createName,
  createLabel,
  options,
  defaultValue,
  className,
  placeholder,
}: {
  id?: string
  name: string
  createName?: string
  createLabel?: string
  options: Array<ComboboxOptions>
  className?: string
  placeholder?: string
  defaultValue?: string
}) {
  const [value, setValue] = useState<string | undefined>(defaultValue)
  const [prevOptions, setPrevOptions] = useState(options)
  if (prevOptions !== options) {
    setPrevOptions(options)

    // We create new options by LABEL, not value
    // So when new options come in, set our value to the matching option
    const matchingOption = options.find((item) => item.label === value)
    if (matchingOption) {
      setValue(matchingOption.value)
    }
  }

  const [open, setOpen] = useState(false)
  const [query, setQuery] = useState<string>("")

  const matchingOption = options.find((item) => item.value === value)

  const queryMatchesOption =
    query.length > 0 &&
    options
      .map((option) => option.label.toLowerCase())
      .includes(query.trim().toLowerCase())

  return (
    <div className={cn(className)}>
      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <Button
            id={id}
            type="button"
            variant="outline"
            role="combobox"
            aria-expanded={open}
            className="w-full justify-between px-3"
          >
            {value ? (
              <div className="relative mr-auto flex flex-grow items-center overflow-hidden">
                <span>
                  {matchingOption ? (
                    <>
                      <span>{matchingOption.label}</span>
                      <input
                        type="hidden"
                        name={name}
                        value={matchingOption.value}
                      />
                    </>
                  ) : createName ? (
                    <>
                      <span>
                        {createLabel ? (
                          <strong>{createLabel}&nbsp;</strong>
                        ) : null}{" "}
                        {value}
                      </span>
                      <input type="hidden" name={createName} value={value} />
                    </>
                  ) : null}
                </span>
              </div>
            ) : (
              <span>{placeholder}</span>
            )}
            <Icon
              name="chevron-down"
              className="ml-2 h-4 w-4 shrink-0 opacity-50"
            />
          </Button>
        </PopoverTrigger>
        <PopoverContent
          className="w-[var(--radix-popover-trigger-width)] p-0"
          align="start"
        >
          <Command
            filter={(value, search) =>
              value.toLowerCase().includes(search.toLowerCase().trim()) ? 1 : 0
            }
          >
            <CommandInput
              placeholder={placeholder}
              value={query}
              onValueChange={setQuery}
            />

            <ScrollArea>
              <div className="max-h-80">
                <CommandGroup>
                  <CommandList>
                    {options.map((option) => (
                      <CommandItem
                        key={option.value}
                        value={option.label}
                        onSelect={() => setValue(option.value)}
                      >
                        <Icon
                          name="check"
                          className={cn(
                            "mr-2 h-4 w-4",
                            value === option.value
                              ? "opacity-100"
                              : "opacity-0",
                          )}
                        />
                        {option.label}
                      </CommandItem>
                    ))}
                    {query.length > 0 && !queryMatchesOption && createName ? (
                      <CommandItem
                        key={query}
                        value={query.trim()}
                        onSelect={() => setValue(query.trim())}
                      >
                        {createLabel ? (
                          <strong>{createLabel}&nbsp;</strong>
                        ) : null}
                        {query}
                      </CommandItem>
                    ) : null}
                  </CommandList>
                </CommandGroup>
              </div>
            </ScrollArea>
          </Command>
        </PopoverContent>
      </Popover>
    </div>
  )
}
